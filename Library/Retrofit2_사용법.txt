https://square.github.io/retrofit/

//Retrofit 사용법

1. HTTP API 를 Java 인터페이스로 전환 

* Service Interface  
public interface GitHubService {
  @GET("users/{user}/repos")
  Call<List<Repo>> listRepos(@Path("user") String user);
}

* Retrofit class  
	-> Retrofit 생성 클래스에서 Service Interface를 implementation 한다. 

Retrofit retrofit = new Retrofit.Builder()
    .baseUrl("https://api.github.com/") 
    .build();
	-> Retrofit 객체를 생성한다. 

GitHubService service = retrofit.create(GitHubService.class);
	-> 생성한 Retrofit 객체를 앞 서 정의한 Service Interface 와 연결한다. 


2. call 에 작성된 각각의 Service Interface 에서 
원격 웹 서버에 동기식 또는 비동기식 HTTP 요청을 작성할 수 있다. 
Call<List<Repo>> repos = service.listRepos("octocat"); 

@ 어노테이션을 사용하여 HTTP 요청한다 


3. API 선언 
-> 인터페이스 메소드 및 해당 배개 변수에 대한 주석은 요청 처리 방법을 나타낸다. 

-> 모든 메소드에는 요청 메소드 및 상대 URL을 제공하는 HTTP 주석이 있어야 한다. 
	-> GET, POST, PUT, DELETE .. 
@GET("users/list")
@GET("users/list?sort=desc")

-> URL 조작
	-> 요청 URL 은 메서드의 대체 블록과 파라미터를 사용하여 동적으로 업데이트 할 수 있다. 
	-> 교체 블럭은 {} 에 둘러싸인 문자열이다. 
	-> 해당 파라미터에 동일한 문자열을 사용하여 @Path 주석을 달아야 한다. 
@GET("group/{id}/users")
Call<List<User>> groupList(@Path("id") int groupId);

-> 쿼리 배개변수 추가 
@GET("group/{id}/users")
Call<List<User>> groupList(@Path("id") int groupId, @Query("sort") String sort);

-> 복잡한 쿼리 매개변수 조합의 경우 맵을 사용
@GET("group/{id}/users")
Call<List<User>> groupList(@Path("id") int groupId, @QueryMap Map<String, String> options);


4. REQUEST BODY
-> 객체는 @Body 주석과 함께 HTTP 요청 본문으로 사용할 수 있도록 지정할 수 있다. 
-> Retrofit 인스턴스에 지정된 컨버터를 사용하여 변환된다. 
-> 컨버터가 추가되지 않으면 RequestBody 만 사용할 수 있다. 
@POST("users/new")
Call<User> createUser(@Body User user);


5. Form-encoded 와 멀티파트 데이터를 전송하는 방법 선언 
-> Form-encoded 데이터는 @FormUrlEncoded 가 있을 때 전송된다. 
-> 각 키와 값에는 이름과 값을 제공하는 객체가 포함된 @Feild가 있다. 
@FormUrlEncoded
@POST("user/edit")
Call<User> updateUser(@Field("first_name") String first, @Field("last_name") String last);

-> 멀티파트 요청은 @Multipart 가 메소드에 있을 때 사용된다. 
-> 각각의 파트는 @Part 로 구분하여 선언한다. 
-> 멀티파트에서는 Retrofit 컨버터중 하나를 사용하거나 RequestBody를 구현하여 처리할 수 있다.
@Multipart
@PUT("user/photo")
Call<User> updateUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description);


6.  HEADER 조작 
-> @Headers 를 사용하여 메서드에 대한 정적 헤더를 설정할 수 있다. 
@Headers("Cache-Control: max-age=640000")
@GET("widget/list")
Call<List<Widget>> widgetList();

@Headers({
    "Accept: application/vnd.github.v3.full+json",
    "User-Agent: Retrofit-Sample-App"
})
@GET("users/{username}")
Call<User> getUser(@Path("username") String username);

-> 헤더는 서로 덮어쓰지 않는다. 같은 이름을 가진 모든 헤더가 요청에 포함된다. 
-> 요청헤더는 @Header 주석을 사용하여 동적으로 업데이트 할 수 있다.
	-> 매개변수를 @Header 에 제공해야한다.
	-> 값이 null 이면 헤더가 생략되고 그렇지 않으면 ToString 값에 호출된 결과가 사용된다.
@GET("user")
Call<User> getUser(@Header("Authorization") String authorization)

-> 복작한 헤더 조합에 대해서도 맵을 사용할 수 있다. 
@GET("user")
Call<User> getUser(@HeaderMap Map<String, String> headers)

-> 모든 요청에 추가해야 하는 헤더는 OkHttp interceptor 를 사용하여 지정할 수 있다. 
-> 호출 인스턴스는 동기 or 비동기식으로 실행될 수 있다. 
-> 각 인스턴스는 한번만 사용하지만 clone() 을 호출하면 사용할 수 있는 새 인스턴스가 생성된다.
-> 안드로이드에서는 callback 이 메인 스레드에서 실해된다.
	-> jvm 에서 콜백은 http 요청을 실행한 동일한 스레드에서 발생한다. 


7. Retrofit 구성
-> Retrofit은 API 인터페이스가 호출 가능한 개체로 바뀌는 클래스이다.
-> 기본적으로 플랫폼에 대해 정상적인 기본값을 제공하지만 사용자 지정을 허용한다. 

//Converter
->기본적으로 HTTP body를 OkHttp의 ResponseBody 유형으로 deserialize 할 수 있다.
	-> @Body 에 대한 RequestBody 유형만 수락할 수 있다. 

-> 변환기를 추가하여 다른 유형을 지원할 수 있다.
Gson: com.squareup.retrofit2:converter-gson
Jackson: com.squareup.retrofit2:converter-jackson
Moshi: com.squareup.retrofit2:converter-moshi
Protobuf: com.squareup.retrofit2:converter-protobuf
Wire: com.squareup.retrofit2:converter-wire
Simple XML: com.squareup.retrofit2:converter-simplexml
Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars

ex) GsonConverterFactory 클래스를 사용하여 Gson을 deserialization 한다.
	-> GitHubService 인터페이스를 구현

Retrofit retrofit = new Retrofit.Builder()
    .baseUrl("https://api.github.com")
    .addConverterFactory(GsonConverterFactory.create())
    .build();

GitHubService service = retrofit.create(GitHubService.class);


8. 커스텀 컨버터
Retrofit 에서 지원하지 않는 컨텐츠 형식 -> YAML,txt, 사용자 지정형식
해당 형식들을 사용하는 api와 통신해야 한다면?
다른 라이브러리를 사용하여 기존 형식을 구현하고자 한다면?
레트로핏 에서는 자신의 컨버터를 쉽게 만들 수 있다. 
