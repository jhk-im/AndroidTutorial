https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html

Mockito + 프로가드 + Flavors

// Combatting flaky tests
애프리케이션이 때때로 실패하거나 응답하는데 시간이 오래 걸릴 수 있는 외부 의존성을 가지고 있는 경우
에스프레소나 UI 오토메이터와 같은 프레임워크를 사용한 ui 테스트는 쉽게 취약해질수있다. 
이러한 테스트는 신뢰성이 떨어지므로 테스트를 하는 모든 목적을 망치게 된다. 
이 문제에 대한 일반적인 해결책은 hermetic testing
즉, 테스트가 의존성과 격리되어있는지 확인하는 것이다. 
몇가지 좋은 예가 있다. 

- 네트워크를 직접하는 대신 디스크에 저장된 파일에서 
데이터를 즉시 반환하는 가짜 api 클라이언트나 가짜 서버를 통해 테스트할 수 있다. 
이는 네트워크 지연시간 및 취약성과 실제 서버에서 발생하는 모든 오류를 우회한다. 

- 저수준 프레임워크 api (카메라,스토리지와 같은 하드웨어에 액세스하는 api) 와의
상호작용을 중간 인터페이스를 통해 전달할 수 있다 .
이 인터페이스의 가짜 구현은 하드웨어에 의존하지 않고 
이미지 같은 사전 로드된 데이터를 참조하는 즉시 반환할 수 있다. 

- 어떤 센서도 GPS, 마이크, 가속계 등과 같은 가짜 객체로 교체할 수 있으며,
미리 설정된 위치나 제스처를 시뮬레이션 하는 입력세트와 같이 
실제에서 테스트하기 어려운 데이터를 테스트할 수 있는 기회를 제공한다. 

종속성 주입 (Dependency Injection)은 테스트, 모듈재사용 및 
상호 교환이 용이하도록 하는 소프트웨어 설계 패턴이다. 
DI 프레임워크는 이 패턴과 관련된 boilerplate를 처리하는데 도움을 줄 수 있지만,
그것들을 설정하고 어떻게 작동하는지 이해는데는 상당한 시간이 걸릴 수 있다. 
애플리케이션용 프레임워크 중 하나를 사용할 준비가 되기전에,
특히 프로젝트 요구 사항이 간단할 경우 보다 쉬운 방법을 탐색하는 것이 좋다. 

// productFlavors 로 종속성 관리 
productFlavors는 컴파일 시간에 JAVA 클래스를 교환할 수 있고
추가 라이브러리가 필요 없는 안드로이드 스튜디오와
안드로이드 그래들 플러그인의 강력한 기능이다. 
flavor dimensions 의 대표적인 예는 다음과 같다. 

- 유료/ 무료 로 나뉘는 apk 
- 테스트를 다른 소스세트에 보관하고 베타 버전을 신속하게 생성하기 위한 안정성

동일한 메커니즘을 활용하여 두 가지 버전의 앱을 만들어 hermetic testing 을 도울 수 있다.

- prod : 실제 데이터와 리소스를 사용하여 서비스 및 구성요소의 실제 구현 
- mock : 테스트하기 어려운 종속성의 가짜 구현을 포함하는 버전 

// 사용법
1. app / build.gradle 파일에 flavors 를 생성한다. 

 android {  
      productFlavors {  
           mock {   
                applicationIdSuffix = ".mock"  
           }  
           prod  
      }  
 }  

2. app/src/prod와 app/src/mock 두개의 디렉토리를 생성한다. 

3. 프로덕션 코드에 사용할 클래스를 Prod/java 폴더에 생성하거나
   main/java 에서 이동시킨다.  기본 / 자바 폴더에 클래스가 없는지 확인

4. mock/java 폴더에서 동일한 클래스를 만들되 테스트에 사용할 가짜 구현을 제공한다. 

5. 안드로이드 스튜디오의 Build Variants 창에서 설치하거나 테스트를 실행할 varient을 선택한다.
   varient 는 flavor와 빌드타입의 조합이다. 


// 테스트해보기 
prod 및 mock 이 구성되어 있고 mock 실행이 가능 한 경우
다음 단계별 작업을 사용하여 테스트 실행 방법을 선택할 수 있다. 
 
*connectedMockDebugAndroidTest
- 안드로이드테스트 및 안드로이드테스트mock 디렉토리를 병합하고 
소스집합에서 발견된 모든 테스트를 실행한다. 
이러한 테스트는 은밀한 방식으로 진행되기 때문에 더 빨라질 것이다. 

*connectedProdDebugAndroidTest
- 실제 API와 센서를 사용하여 때때로 실패할 수 있다.
연속 통합 시스템을 가지고 있는 경우, 
이 작업은 매일밤 실행되거나 수동으로 사용될 수 있다.
androidTest 에서 실행하지만  
androidTestProd 는 존재하지 않는다. 


